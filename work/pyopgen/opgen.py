import datetime
import re

modes = {}
simple_opcodes = []
secondary_opcodes = {}
prefixed_opcodes = {}
prefixes = []


def split_args(args):
    return map(str.strip, map(lambda x: str.split(x, ")", 1)[0],
               args.split("(", 2))[1].split(","))

def handle_opc(line):
    args = split_args(line)

    if 'op_illegal' in args[3]:
        return

    opcode_value = int(args[0], 0)
    prefix = opcode_value >> 8
    opcode_name = args[2]
    if not args[4] in modes:
        raise ValueError("mode %s not in mode list" % args[4])

    if prefix:
        if prefix not in prefixes:
            prefixes.append(prefix)
        if opcode_value not in prefixed_opcodes.values():
            prefixed_opcodes[opcode_name] = opcode_value
        secondary_opcodes[opcode_value] = (opcode_name, args[4])
    else:
        simple_opcodes.append((opcode_name, opcode_value, args[4]))


def handle_extop(line):
    prefix_opcode, base_opcode, opcode_name = split_args(line)

    if prefix_opcode not in [x for x, y, z in simple_opcodes]:
        raise ValueError("prefix opcode '%s' not found" % prefix_opcode)
    prefix = [y for x, y, z in simple_opcodes if x==prefix_opcode][0]
    opcode_value = prefix << 8

    if base_opcode not in [x for x, y, z in simple_opcodes]:
        raise ValueError("base opcode '%s' not found" % base_opcode)
    opcode_value += [y for x, y, z in simple_opcodes if x==base_opcode][0]

    if opcode_value not in prefixed_opcodes.values():
        prefixed_opcodes[opcode_name] = opcode_value


def handle_format(line):
    mode = map(str.strip, line.split("/",1)[0][8:].split(" ", 1))

    if mode[0][0] == "_":
        return

    modes[mode[0]] = int(mode[1])


def opgen():
    with open("opcodes.h", "r") as in_fi:
        for line in in_fi:
            line = line.translate(None, '"')
            if line.find('_opc_', 0, 5) == 0:
                handle_opc(line)
            elif line.find('_extop_', 0, 7) == 0:
                handle_extop(line)
            elif line.find("#define", 0, 7) == 0:
                handle_format(line)

    with open("OPCODES.H", "w") as of:
        of.write("* OPCODES.H\n" + \
        "* Generated by pyOPGEN at '%s'\n\n" % datetime.datetime.now())

        for x, y in sorted(modes.iteritems(), key=lambda x: x[1]):
            of.write("$define MODE.%s %i\n" % (x.replace('_', '.'), y))
        of.write("\n")

        for x, y, z in sorted(simple_opcodes, key=lambda x: x[1]):
            of.write("$define OP.%s %i  ;* %02X\n" % (x, y, y))
        of.write("\n")

        for z in prefixes:
            of.write("* Secondary opcodes, prefix %02X" % z)
            of.write(" (%s)\n" % [x for x, y, e in simple_opcodes if y==z][0])
            for x, y in [(j,i) for i,j in sorted(secondary_opcodes.iteritems(), key=lambda x: x[1]) if (i>>8)==z]:
                of.write("$define OP.%s %i  ;* %02X\n" % (x[0], y, y))
            of.write("\n")
        of.write("\n")

        of.write("* Simple opcodes table\n")
        of.write("opcodes = \"%s\"\n" % "\xFD".join([x[0] for x in simple_opcodes]))
        of.write("\n")

        of.write("* Secondary opcodes table\n")
        of.write("prefixed.opcodes = " + \
                 "\"%s\"\n" % "\xFD".join([x[1][0] for x in secondary_opcodes.iteritems()]))
        of.write("\n")

        of.write("* Secondary opcodes table\n")
        of.write("prefixed.opcode.values = " + \
                 "\"%s\"\n" % "\xFD".join([str(x[0]) for x in secondary_opcodes.iteritems()]))
        of.write("\n")

        of.write("$ifdef OPCODE.MODES\n")
        of.write("simple.modes = " + \
                 "\"%s\"\n" % "".join([chr(ord("A")+modes[x[2]]) for x in simple_opcodes]))
        of.write("secondary.modes = " + \
                 "\"%s\"\n" % "".join([chr(ord("A")+modes[x[1]]) for y, x in secondary_opcodes.iteritems()]))
        of.write("$endif\n")


if __name__ == "__main__":
    opgen()
